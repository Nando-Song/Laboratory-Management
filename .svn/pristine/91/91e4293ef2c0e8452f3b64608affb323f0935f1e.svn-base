using Autofac;
using Autofac.Integration.Mvc;
using LABMANAGE.App_Start;
using LABMANAGE.Data;
using LABMANAGE.Data;
using LABMANAGE.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace LABMANAGE
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            var builder = new ContainerBuilder();
            builder.RegisterControllers(Assembly.GetExecutingAssembly()).PropertiesAutowired();

            //注册Filter
            //builder.RegisterFilterProvider();
            //注册无接口类型
            builder.RegisterType<Lab_ManagementEntities>().As<Lab_ManagementEntities>().InstancePerRequest().PropertiesAutowired();
            //注册接口类型
            var assemblys = AppDomain.CurrentDomain.GetAssemblies().ToList();
            builder.RegisterAssemblyTypes(assemblys.ToArray()).Where(t => t.Name.EndsWith("Service")).AsImplementedInterfaces().InstancePerLifetimeScope().PropertiesAutowired(PropertyWiringOptions.AllowCircularDependencies);
            builder.RegisterAssemblyTypes(assemblys.ToArray()).Where(t => t.Name.EndsWith("Repository")).AsImplementedInterfaces().InstancePerLifetimeScope().PropertiesAutowired();
            builder.RegisterGeneric(typeof(QQInvRepositoryImpl<>)).As(typeof(IQQInvRepository<>)).InstancePerLifetimeScope().PropertiesAutowired();


            var container = builder.Build();
            DependencyResolver.SetResolver(new AutofacDependencyResolver(container));

            AreaRegistration.RegisterAllAreas();
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
        }
    }
}
